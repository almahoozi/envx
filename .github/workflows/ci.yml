name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run short tests
      run: go test -short -race -coverprofile=coverage.out ./...

    - name: Generate test summary
      if: always()
      run: |
        echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        
        # Get test results
        if go test -short -json ./... > test-results.json 2>&1; then
          echo "✅ **All tests passed!**" >> $GITHUB_STEP_SUMMARY
          TEST_STATUS="✅ PASSED"
        else
          echo "❌ **Some tests failed**" >> $GITHUB_STEP_SUMMARY  
          TEST_STATUS="❌ FAILED"
        fi
        
        # Count tests
        TOTAL_TESTS=$(grep -c '"Test":' test-results.json 2>/dev/null || echo "0")
        echo "- **Total Tests:** $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** $TEST_STATUS" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Generate coverage summary
      if: always()
      run: |
        echo "## 📊 Code Coverage" >> $GITHUB_STEP_SUMMARY
        
        if [ -f coverage.out ]; then
          # Get overall coverage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
          echo "- **Overall Coverage:** $COVERAGE" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get per-package coverage
          echo "### Per-Package Coverage" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|----------|" >> $GITHUB_STEP_SUMMARY
          
          go tool cover -func=coverage.out | grep -v "total:" | while read line; do
            if [[ $line =~ ^(.+):.*[[:space:]]([0-9.]+%) ]]; then
              package=$(echo "${BASH_REMATCH[1]}" | sed 's/.*\///' | sed 's/\.go.*//')
              coverage="${BASH_REMATCH[2]}"
              echo "| $package | $coverage |" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "❌ **No coverage data available**" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

    - name: Generate benchmark summary
      if: always()
      run: |
        echo "## 🚀 Performance Benchmarks" >> $GITHUB_STEP_SUMMARY
        
        # Run benchmarks and capture output
        if go test -bench=. -benchmem ./... > bench-results.txt 2>&1; then
          echo "✅ **Benchmarks completed successfully**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Key Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "| Benchmark | Operations | ns/op | MB/s | allocs/op |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|------------|-------|------|-----------|" >> $GITHUB_STEP_SUMMARY
          
          # Parse benchmark results
          grep "^Benchmark" bench-results.txt | head -10 | while read line; do
            if [[ $line =~ ^(Benchmark[^[:space:]]+)[[:space:]]+([0-9]+)[[:space:]]+([0-9.]+)[[:space:]]+ns/op ]]; then
              name=$(echo "${BASH_REMATCH[1]}" | sed 's/Benchmark//')
              ops="${BASH_REMATCH[2]}"
              nsop="${BASH_REMATCH[3]}"
              echo "| $name | $ops | $nsop | - | - |" >> $GITHUB_STEP_SUMMARY
            fi
          done
        else
          echo "❌ **Benchmark execution failed**" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

    # OPTIONAL: Remove this step if you don't want to upload coverage to external service
    # Codecov provides coverage visualization and reporting (free for public repos)
    - name: Upload coverage to Codecov
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: envx-cli-coverage

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Generate lint summary
      if: always()
      run: |
        echo "## 🔍 Code Quality (Linting)" >> $GITHUB_STEP_SUMMARY
        
        # Run linter and capture results
        if golangci-lint run --timeout=5m > lint-results.txt 2>&1; then
          echo "✅ **No linting issues found!**" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** All checks passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Linting issues detected**" >> $GITHUB_STEP_SUMMARY
          ISSUE_COUNT=$(wc -l < lint-results.txt 2>/dev/null || echo "0")
          echo "- **Issues Found:** $ISSUE_COUNT" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

  format:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted correctly:"
          gofmt -s -l .
          echo "Please run 'gofmt -s -w .' to fix formatting"
          exit 1
        fi

    - name: Check imports
      run: |
        go install golang.org/x/tools/cmd/goimports@latest
        if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
          echo "The following files have import issues:"
          goimports -l .
          echo "Please run 'goimports -w .' to fix imports"
          exit 1
        fi

    - name: Generate format summary
      if: always()
      run: |
        echo "## 📝 Code Formatting" >> $GITHUB_STEP_SUMMARY
        
        # Check formatting
        UNFORMATTED=$(gofmt -s -l . | wc -l)
        IMPORT_ISSUES=$(goimports -l . 2>/dev/null | wc -l)
        
        if [ "$UNFORMATTED" -eq 0 ] && [ "$IMPORT_ISSUES" -eq 0 ]; then
          echo "✅ **All files properly formatted**" >> $GITHUB_STEP_SUMMARY
          echo "- **gofmt:** ✅ No issues" >> $GITHUB_STEP_SUMMARY
          echo "- **goimports:** ✅ No issues" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Formatting issues detected**" >> $GITHUB_STEP_SUMMARY
          echo "- **gofmt issues:** $UNFORMATTED files" >> $GITHUB_STEP_SUMMARY
          echo "- **import issues:** $IMPORT_ISSUES files" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      # Note: -no-fail used due to G115 false positives from CGO dependencies in build cache
      # Real security issues will still be reported in SARIF output for review
      run: gosec -no-fail -fmt sarif -out gosec.sarif ./...

    - name: Generate security summary
      if: always()
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        
        # Run gosec for summary (without SARIF output)
        if gosec -no-fail -fmt json -out gosec.json ./... > gosec-output.txt 2>&1; then
          echo "✅ **Security scan completed**" >> $GITHUB_STEP_SUMMARY
          
          # Parse JSON results if available
          if [ -f gosec.json ]; then
            TOTAL_FILES=$(jq -r '.Stats.files // 0' gosec.json 2>/dev/null || echo "0")
            TOTAL_LINES=$(jq -r '.Stats.lines // 0' gosec.json 2>/dev/null || echo "0") 
            NOSEC_COUNT=$(jq -r '.Stats.nosec // 0' gosec.json 2>/dev/null || echo "0")
            ISSUES_COUNT=$(jq -r '.Issues | length' gosec.json 2>/dev/null || echo "0")
            
            echo "- **Files Scanned:** $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
            echo "- **Lines of Code:** $TOTAL_LINES" >> $GITHUB_STEP_SUMMARY
            echo "- **Security Issues:** $ISSUES_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **Suppressed (nosec):** $NOSEC_COUNT" >> $GITHUB_STEP_SUMMARY
            
            if [ "$ISSUES_COUNT" -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "⚠️ **Note:** Issues found may include false positives from CGO dependencies" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status:** Scan completed successfully" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "❌ **Security scan encountered issues**" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

    # OPTIONAL: Remove this step if you don't want security results in GitHub Security tab
    # This uploads security scan results to GitHub's Security tab (stays within GitHub)
    - name: Upload SARIF file
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: Build binary (Unix)
      if: runner.os != 'Windows'
      run: go build -v -ldflags="-s -w" -o envx .

    - name: Build binary (Windows)
      if: runner.os == 'Windows'
      run: go build -v -ldflags="-s -w" -o envx.exe .

    - name: Test binary (Unix)
      if: runner.os != 'Windows'
      run: |
        ./envx man > /dev/null
        echo "Binary works correctly"

    - name: Test binary (Windows)
      if: runner.os == 'Windows'
      run: |
        .\envx.exe man > $null
        echo "Binary works correctly"

    - name: Generate build summary
      if: always()
      shell: bash
      run: |
        echo "## 🏗️ Build Results (${{ matrix.os }})" >> $GITHUB_STEP_SUMMARY
        
        # Check if binary exists and get size
        if [ "${{ runner.os }}" = "Windows" ]; then
          BINARY="envx.exe"
        else
          BINARY="envx"
        fi
        
        if [ -f "$BINARY" ]; then
          SIZE=$(ls -lh "$BINARY" | awk '{print $5}')
          echo "✅ **Build successful**" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Binary Size:** $SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- **Binary Test:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build failed**" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform:** ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

  mod-tidy:
    name: Go Mod Tidy
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: Check if go.mod is tidy
      run: |
        go mod tidy
        if [ -n "$(git status --porcelain go.mod go.sum)" ]; then
          echo "go.mod or go.sum is not tidy"
          git diff go.mod go.sum
          exit 1
        fi

    - name: Generate dependencies summary
      if: always()
      run: |
        echo "## 📦 Dependencies" >> $GITHUB_STEP_SUMMARY
        
        # Check go.mod status
        go mod tidy
        if [ -z "$(git status --porcelain go.mod go.sum)" ]; then
          echo "✅ **Dependencies are properly managed**" >> $GITHUB_STEP_SUMMARY
          echo "- **go.mod:** ✅ Tidy" >> $GITHUB_STEP_SUMMARY
          echo "- **go.sum:** ✅ Up to date" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Dependencies need attention**" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** go.mod or go.sum not tidy" >> $GITHUB_STEP_SUMMARY
        fi
        
        # List direct dependencies
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Direct Dependencies" >> $GITHUB_STEP_SUMMARY
        echo "| Package | Version |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|---------|" >> $GITHUB_STEP_SUMMARY
        go list -m -f '{{if not .Indirect}}| {{.Path}} | {{.Version}} |{{end}}' all | grep -v "^| github.com/almahoozi/envx" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

  vulnerability-check:
    name: Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run vulnerability check
      run: govulncheck ./...

    - name: Generate vulnerability summary
      if: always()
      run: |
        echo "## 🛡️ Vulnerability Check" >> $GITHUB_STEP_SUMMARY
        
        # Run govulncheck and capture output
        if govulncheck -json ./... > vuln-results.json 2>&1; then
          echo "✅ **No vulnerabilities detected**" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** All dependencies are secure" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Vulnerabilities detected**" >> $GITHUB_STEP_SUMMARY
          
          # Try to parse results
          if [ -f vuln-results.json ]; then
            VULN_COUNT=$(grep -c '"type":"vulnerability"' vuln-results.json 2>/dev/null || echo "unknown")
            echo "- **Vulnerabilities Found:** $VULN_COUNT" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** Check the detailed logs for more information" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        echo "" >> $GITHUB_STEP_SUMMARY

  # Final summary job that runs after all others
  summary:
    name: Final Summary
    runs-on: ubuntu-latest
    needs: [test, lint, format, security, build, mod-tidy, vulnerability-check]
    if: always()
    
    steps:
    - name: Generate final summary
      run: |
        echo "# 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Job Status Overview" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Linting | ${{ needs.lint.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📝 Formatting | ${{ needs.format.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 📦 Dependencies | ${{ needs.mod-tidy.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🛡️ Vulnerabilities | ${{ needs.vulnerability-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.format.result }}" == "success" && "${{ needs.security.result }}" == "success" && "${{ needs.build.result }}" == "success" && "${{ needs.mod-tidy.result }}" == "success" && "${{ needs.vulnerability-check.result }}" == "success" ]]; then
          echo "## 🎉 Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
          echo "All quality checks passed! Your code is ready for deployment. 🚀" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Overall Status: NEEDS ATTENTION" >> $GITHUB_STEP_SUMMARY
          echo "Some checks failed. Please review the failed jobs above." >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated by envx CI Pipeline*" >> $GITHUB_STEP_SUMMARY 